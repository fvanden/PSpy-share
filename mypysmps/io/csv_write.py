# -*- coding: utf-8 -*-
#################
from email import header
import os
import re
import numpy as np
import pandas as pd
import csv
from csv import writer
from copy import deepcopy

from ..core.smps import SMPS
from ..config import get_metadata, get_instrument_header, _FIELD_MAPPING
from .read_aux import file_to_config, smps_file_to_config, opc_file_to_config
#################

"""
mysmps.io.csv_write
==================

Functions for reading of csv files:
    write_aim_csv

Created on Wed Sep 30 12:00 2020

@author: flovan / fvanden

Revision history:   30.09.2020 - Created


"""
def write_aim_csv(smps, filepath, fileorg = 'AIM', **kwargs):
    """
    Writes SMPS object to a csv file in the same organisation
    as the file generated by the AIM software
    
    Parameters
    ----------
    smps - SMPS
        core.SMPS object to use for creating plots

    filepath : str
        path and filename of destination file. Should be csv
        
    fileorg : str
        different file organisations can be found in the default_config
        for new filetypes add mappings here and specify the filetype
        
    kwargs : 
        
        
    Returns
    -------
    None
    """

    # create output folder
    folder, filename = os.path.split(filepath)
    if not os.path.exists(folder):
        os.makedirs(folder)

    # enforce csv file creation
    filename, extension = os.path.splitext(filename)
    filename = filename + '.csv'
    
    ignore = ['sample','data', 'metadata','header','pddata','datetime','instrument_type']
    var = smps.data['variables'][0]

    # open csv file for writing
    with open(os.path.join(folder, filename), 'w') as csvfile:
        writer = csv.writer(csvfile)
        for key in list(smps.metadata.keys()):
            writer.writerow([key, smps.metadata[key]])
        writer.writerow(smps.header)
        for i in range(0, len(smps.sample['data'])):
            row = []
            for item in smps.header:
                if item == '':
                    pass
                else:
                    try:
                        float(item)
                        idx = np.where(smps.diameter['data'] == float(item))
                        row.append(smps.data[var]['data'][idx,i][0][0])
                    except:
                        if item in ['Sample #']:
                            row.append(smps.sample['data'][i])
                        elif item in ['Diameter Midpoint (nm)']:
                            row.append('check original data')
                        else:
                            
                            att = list(_FIELD_MAPPING['AIM'].keys())[list(_FIELD_MAPPING['AIM'].values()).index(item)]
                            row.append(smps.__getattribute__(att)['data'][i])
            writer.writerow(row)
        
    
def write_opc_csv(opc, filepath, fileorg = 'OPC', **kwargs):
    """
    Writes OPC object to a csv file in same file organisation
    as original file
    
    Parameters
    ----------
    opc - OPC
        core.SMPS.ParticleSizer object 

    filepath : str
        path and filename of destination file. Should be csv
        
    fileorg : str
        different file organisations can be found in the default_config
        for new filetypes add mappings here and specify the filetype
        
    kwargs : 
        
        
    Returns
    -------
    None
    """
    # create output folder
    folder, filename = os.path.split(filepath)
    if not os.path.exists(folder):
        os.makedirs(folder)

    # enforce csv file creation
    filename, extension = os.path.splitext(filename)
    filename = filename + '.csv'

    ignore = ['sample','data', 'metadata','header','pddata','datetime','instrument_type']
    var = opc.data['variables'][0]

    header = deepcopy(get_instrument_header(fileorg))
    header[0] = 'datetime'
    
    # open csv file for writing
    with open(os.path.join(folder, filename), 'w') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(header)
        for i in range(0, len(opc.sample['data'])):
            row = []
            for item in header:
                if 'bin' in item:
                    idx = int(re.findall(r'\d+',item)[0])
                    row.append(opc.data[var]['data'][idx,i])
                else:
                    try:
                        att = _FIELD_MAPPING[fileorg][item]
                        row.append(opc.__getattribute__(att)['data'][i])
                    except KeyError:
                        row.append(opc.__getattribute__(item)['data'][i])
            writer.writerow(row)


